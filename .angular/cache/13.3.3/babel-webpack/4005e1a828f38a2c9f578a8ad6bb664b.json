{"ast":null,"code":"import { InjectionToken, Injectable, Inject, Injector, NgModule } from '@angular/core';\nimport { Store, getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';\nimport { catchError, tap } from 'rxjs/operators';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Interface for the redux-devtools-extension API.\r\n * @record\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction NgxsDevtoolsExtension() {}\n\nif (false) {\n  /**\r\n   * @param {?} state\r\n   * @return {?}\r\n   */\n  NgxsDevtoolsExtension.prototype.init = function (state) {};\n  /**\r\n   * @param {?} action\r\n   * @param {?=} state\r\n   * @return {?}\r\n   */\n\n\n  NgxsDevtoolsExtension.prototype.send = function (action, state) {};\n  /**\r\n   * @param {?} fn\r\n   * @return {?}\r\n   */\n\n\n  NgxsDevtoolsExtension.prototype.subscribe = function (fn) {};\n}\n/**\r\n * @record\r\n */\n\n\nfunction NgxsDevtoolsAction() {}\n\nif (false) {\n  /** @type {?} */\n  NgxsDevtoolsAction.prototype.type;\n  /** @type {?} */\n\n  NgxsDevtoolsAction.prototype.payload;\n  /** @type {?} */\n\n  NgxsDevtoolsAction.prototype.state;\n  /** @type {?} */\n\n  NgxsDevtoolsAction.prototype.id;\n  /** @type {?} */\n\n  NgxsDevtoolsAction.prototype.source;\n}\n/**\r\n * @record\r\n */\n\n\nfunction NgxsDevtoolsOptions() {}\n\nif (false) {\n  /**\r\n   * The name of the extension\r\n   * @type {?|undefined}\r\n   */\n  NgxsDevtoolsOptions.prototype.name;\n  /**\r\n   * Whether the dev tools is enabled or note. Useful for setting during production.\r\n   * @type {?|undefined}\r\n   */\n\n  NgxsDevtoolsOptions.prototype.disabled;\n  /**\r\n   * Max number of entiries to keep.\r\n   * @type {?|undefined}\r\n   */\n\n  NgxsDevtoolsOptions.prototype.maxAge;\n  /**\r\n   * Reformat actions before sending to dev tools\r\n   * @type {?|undefined}\r\n   */\n\n  NgxsDevtoolsOptions.prototype.actionSanitizer;\n  /**\r\n   * Reformat state before sending to devtools\r\n   * @type {?|undefined}\r\n   */\n\n  NgxsDevtoolsOptions.prototype.stateSanitizer;\n}\n/** @type {?} */\n\n\nconst NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Adds support for the Redux Devtools extension:\r\n * http://extension.remotedev.io/\r\n */\n\nlet NgxsReduxDevtoolsPlugin = /*#__PURE__*/(() => {\n  class NgxsReduxDevtoolsPlugin {\n    /**\r\n     * @param {?} _options\r\n     * @param {?} _injector\r\n     */\n    constructor(_options, _injector) {\n      this._options = _options;\n      this._injector = _injector;\n      this.devtoolsExtension = null;\n      this.windowObj = typeof window !== 'undefined' ? window : {};\n      /** @type {?} */\n\n      const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];\n\n      if (globalDevtools) {\n        this.devtoolsExtension =\n        /** @type {?} */\n        globalDevtools.connect(_options);\n        this.devtoolsExtension.subscribe(\n        /**\r\n        * @param {?} a\r\n        * @return {?}\r\n        */\n        a => this.dispatched(a));\n      }\n    }\n    /**\r\n     * Lazy get the store for circular dependency issues\r\n     * @private\r\n     * @return {?}\r\n     */\n\n\n    get store() {\n      return this._injector.get(Store);\n    }\n    /**\r\n     * Middleware handle function\r\n     * @param {?} state\r\n     * @param {?} action\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\n\n\n    handle(state, action, next) {\n      /** @type {?} */\n      const isDisabled = this._options && this._options.disabled;\n\n      if (!this.devtoolsExtension || isDisabled) {\n        return next(state, action);\n      }\n\n      return next(state, action).pipe(catchError(\n      /**\r\n      * @param {?} error\r\n      * @return {?}\r\n      */\n      error => {\n        /** @type {?} */\n        const newState = this.store.snapshot();\n        this.sendToDevTools(state, action, newState);\n        throw error;\n      }), tap(\n      /**\r\n      * @param {?} newState\r\n      * @return {?}\r\n      */\n      newState => {\n        this.sendToDevTools(state, action, newState);\n      }));\n    }\n    /**\r\n     * @private\r\n     * @param {?} state\r\n     * @param {?} action\r\n     * @param {?} newState\r\n     * @return {?}\r\n     */\n\n\n    sendToDevTools(state, action, newState) {\n      /** @type {?} */\n      const type = getActionTypeFromInstance(action); // if init action, send initial state to dev tools\n\n      /** @type {?} */\n\n      const isInitAction = type === '@@INIT';\n\n      if (isInitAction) {\n        /** @type {?} */\n        this.devtoolsExtension.init(state);\n      } else {\n        /** @type {?} */\n        this.devtoolsExtension.send(Object.assign({}, action, {\n          action: null,\n          type\n        }), newState);\n      }\n    }\n    /**\r\n     * Handle the action from the dev tools subscription\r\n     * @param {?} action\r\n     * @return {?}\r\n     */\n\n\n    dispatched(action) {\n      if (action.type === 'DISPATCH') {\n        if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {\n          /** @type {?} */\n          const prevState = JSON.parse(action.state);\n          this.store.reset(prevState);\n        } else if (action.payload.type === 'TOGGLE_ACTION') {\n          console.warn('Skip is not supported at this time.');\n        } else if (action.payload.type === 'IMPORT_STATE') {\n          const {\n            actionsById,\n            computedStates,\n            currentStateIndex\n          } = action.payload.nextLiftedState;\n\n          /** @type {?} */\n          this.devtoolsExtension.init(computedStates[0].state);\n          Object.keys(actionsById).filter(\n          /**\r\n          * @param {?} actionId\r\n          * @return {?}\r\n          */\n          actionId => actionId !== '0').forEach(\n          /**\r\n          * @param {?} actionId\r\n          * @return {?}\r\n          */\n          actionId =>\n          /** @type {?} */\n          this.devtoolsExtension.send(actionsById[actionId], computedStates[actionId].state));\n          this.store.reset(computedStates[currentStateIndex].state);\n        }\n      } else if (action.type === 'ACTION') {\n        /** @type {?} */\n        const actionPayload = JSON.parse(action.payload);\n        this.store.dispatch(actionPayload);\n      }\n    }\n\n  }\n\n  NgxsReduxDevtoolsPlugin.ɵfac = function NgxsReduxDevtoolsPlugin_Factory(t) {\n    return new (t || NgxsReduxDevtoolsPlugin)(ɵngcc0.ɵɵinject(NGXS_DEVTOOLS_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  NgxsReduxDevtoolsPlugin.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgxsReduxDevtoolsPlugin,\n    factory: NgxsReduxDevtoolsPlugin.ɵfac\n  });\n  /** @nocollapse */\n\n  return NgxsReduxDevtoolsPlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  NgxsReduxDevtoolsPlugin.prototype.windowObj;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  NgxsReduxDevtoolsPlugin.prototype._options;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n\n  NgxsReduxDevtoolsPlugin.prototype._injector;\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @param {?} options\r\n * @return {?}\r\n */\n\n\nfunction devtoolsOptionsFactory(options) {\n  return Object.assign({\n    name: 'NGXS'\n  }, options);\n}\n/** @type {?} */\n\n\nconst USER_OPTIONS = new InjectionToken('USER_OPTIONS');\nlet NgxsReduxDevtoolsPluginModule = /*#__PURE__*/(() => {\n  class NgxsReduxDevtoolsPluginModule {\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\n    static forRoot(options) {\n      return {\n        ngModule: NgxsReduxDevtoolsPluginModule,\n        providers: [{\n          provide: NGXS_PLUGINS,\n          useClass: NgxsReduxDevtoolsPlugin,\n          multi: true\n        }, {\n          provide: USER_OPTIONS,\n          useValue: options\n        }, {\n          provide: NGXS_DEVTOOLS_OPTIONS,\n          useFactory: devtoolsOptionsFactory,\n          deps: [USER_OPTIONS]\n        }]\n      };\n    }\n\n  }\n\n  NgxsReduxDevtoolsPluginModule.ɵfac = function NgxsReduxDevtoolsPluginModule_Factory(t) {\n    return new (t || NgxsReduxDevtoolsPluginModule)();\n  };\n\n  NgxsReduxDevtoolsPluginModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxsReduxDevtoolsPluginModule\n  });\n  NgxsReduxDevtoolsPluginModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return NgxsReduxDevtoolsPluginModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { NGXS_DEVTOOLS_OPTIONS, NgxsReduxDevtoolsPlugin, NgxsReduxDevtoolsPluginModule, devtoolsOptionsFactory as ɵa, USER_OPTIONS as ɵb }; //# sourceMappingURL=ngxs-devtools-plugin.js.map","map":null,"metadata":{},"sourceType":"module"}