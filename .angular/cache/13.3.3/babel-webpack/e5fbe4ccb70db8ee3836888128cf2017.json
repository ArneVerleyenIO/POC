{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = environment.baseUrl;\n    }\n\n    getProjects(orderBy, p, framework, industry, projectType) {\n      const localSettings = localStorage.getItem('settings');\n      let language = '';\n\n      if (localSettings) {\n        const settings = JSON.parse(localSettings);\n\n        if (settings.english) {\n          language = 'en';\n        }\n\n        ;\n      }\n\n      ;\n      return this.httpClient.get(this.baseUrl + '/project?per_page=12' + `&filter[orderby]=date&order=${orderBy}` + `&page=${p}` + `&framework=${framework}` + `&industry=${industry}` + `&project_type=${projectType}` + `&lang=${language}`);\n    }\n\n    getProjectById(id) {\n      const localSettings = localStorage.getItem('settings');\n      let language = '';\n\n      if (localSettings) {\n        const settings = JSON.parse(localSettings);\n\n        if (settings.english) {\n          language = 'en';\n        }\n\n        ;\n      }\n\n      ;\n      return this.httpClient.get(this.baseUrl + `/project/${id}` + `?lang=${language}`);\n    }\n\n    getRandomProjects() {\n      const localSettings = localStorage.getItem('settings');\n      let language = '';\n\n      if (localSettings) {\n        const settings = JSON.parse(localSettings);\n\n        if (settings.english) {\n          language = 'en';\n        }\n\n        ;\n      }\n\n      ;\n      return this.httpClient.get(this.baseUrl + '/project?orderby=rand&per_page=4' + `&lang=${language}`);\n    }\n\n    getCategories() {\n      return this.httpClient.get(this.baseUrl + '/acf');\n    }\n\n    getPages() {\n      return this.httpClient.get(this.baseUrl + '/pages');\n    }\n\n    getPage(id) {\n      return this.httpClient.get(this.baseUrl + `/pages/${id}`);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}